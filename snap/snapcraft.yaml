%YAML 1.1
---
# Snapcraft Recipe for Ansible
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be stripped
# before contributing the recipe to the upstream

# Ansible, ansible, ansible-launch
# are placeholders text meant to be replaced by appropriate content
name: ansible
title: Ansible (UNOFFICIAL)
summary: Ansible is Simple IT Automation
description: |
  **Simple, agentless IT automation that anyone can use**

  Ansible is a universal language, unraveling the mystery of how work gets done. Turn tough tasks into repeatable playbooks. Roll out enterprise-wide protocols with the push of a button.

  **Snap-specific information**

  This is NOT an official distribution of Ansible, please refer to the snap's own issue tracker for support:

  https://github.com/Lin-Buo-Ren/ansible-snap/issues

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/Ansible-Mark-RGB.svg

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: GPL-3.0

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: ansible

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
- command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
base: core18
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Files to patch the files in the snap
  patching:
    source: snap/local/patching
    plugin: dump
    organize:
      '*': patching/
    prime:
    - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Programs to modify the behavior of each step of the snapcraft lifecycles
  scriptlets:
    source: snap/local/scriptlets
    plugin: dump
    organize:
      '*': scriptlets/
    prime:
    - -*

  # Stage snap for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  #locales-launch:
    #plugin: nil
    #stage-snaps:
    #- locales-launch
    #stage-packages:
    # For localedef(1)
    #- libc-bin

    # For locale data used by localedef(1)
    #- locales

    # All pre-generated locale data
    # DISABLED: Lots of duplicate data will be included in snap when this is staged, unless the target machine has no resource to generate them in runtime otherwise not using it
    #
    #   Lack of compiled locales breaks gettext based localisation - snapcraft - snapcraft.io
    #   https://forum.snapcraft.io/t/lack-of-compiled-locales-breaks-gettext-based-localisation/3758
    #
    #- locales-all

  # Remote part for support of various desktop technologies
  # Refer: https://github.com/ubuntu/snapcraft-desktop-helpers/blob/master/snapcraft.yaml
  desktop-gnome-platform:
    source: https://github.com/ubuntu/snapcraft-desktop-helpers.git
    source-depth: 1
    source-subdir: gtk

    plugin: make
    build-packages:
    - gcc
    override-build: |
      snapcraftctl build
      mkdir -pv $SNAPCRAFT_PART_INSTALL/gnome-platform

  # Integrate custom dialogs in your snap - doc - snapcraft.io
  # https://forum.snapcraft.io/t/integrate-custom-dialogs-in-your-snap/10825
  zenity-integration:
    plugin: nil
    stage-snaps:
    - zenity-integration

  ansible:
    after:
    # for override-pull script
    - selective-checkout

    source: .
    #source-type:
    #source-branch:
    #source-tag:
    #source-depth:
    override-pull: |
      set -o nounset

      snapcraftctl pull

      "${SNAPCRAFT_STAGE}"/scriptlets/main-adopt-info

    plugin: dump
    organize:
      ansible: bin/
    stage:
    - bin/*

    override-prime: |
      set \
        -o nounset

      snapcraftctl prime

      "${SNAPCRAFT_STAGE}"/patching/patch-desktop-entries.bash

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  ansible:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/ansible

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
    - bin/desktop-launch
    - bin/ansible-launch

    # If the providing part of the app. has a desktop entry, specify its path relative to the `prime` directory.
    # If the packaging target doesn't provide a desktop entry, ignore the `desktop` key and implement a desktop entry in `/snap/gui`
    #desktop: share/applications/ansible.desktop

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # Common desktop interfaces
  # https://forum.snapcraft.io/t/the-desktop-interfaces/2042
  desktop:
  desktop-legacy:
  unity7:
  wayland:

  # Regular files access
  #home:
  #removable-media: # Non-A/C

  # Application-specific files access
  # The auto-connection requires store grant
  # https://forum.snapcraft.io/t/the-personal-files-interface/9357
  # https://forum.snapcraft.io/t/the-system-files-interface/9358
  #user-wide-configs:
    #interface: personal-files
    #read:
    #- $HOME/.config/ansible
  #system-wide-configs:
    #interface: system-files
    #read:
    #- /etc/ansible

  # Network access
  #network:

#slots:
